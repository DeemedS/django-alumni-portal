"""
Django settings for alumniwebsite project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from decouple import config, Csv
from datetime import timedelta
from csp.constants import NONCE
import os



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

RECAPTCHA_PUBLIC_KEY = config('RECAPTCHA_SITE_KEY')
RECAPTCHA_PRIVATE_KEY = config('RECAPTCHA_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    #apps
    'users',
    'homepage',
    'articles',
    'events',
    'careers',
    'services',
    'about',
    'faculty',
    'authentication',
    'story',
    'alumninetwork',

    #third party
    'corsheaders',
    'django_recaptcha',
    'fontawesomefree',
    'rest_framework',
    'csp',
]

MIDDLEWARE = [
    'alumniwebsite.middleware.HttpOnlyCSRFMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django_permissions_policy.PermissionsPolicyMiddleware",

    "csp.middleware.CSPMiddleware",
    "alumniwebsite.middleware.init_csp_nonce_middleware",
    "alumniwebsite.middleware.RemoveServerHeaderMiddleware",
    'alumniwebsite.middleware.JWTAuthenticationMiddleware',
]

ROOT_URLCONF = 'alumniwebsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'faculty.context_processors.custom_auth_flags',
            ],
            "libraries": {
            "csp": "csp.templatetags.csp",
            },
        },

    },
]

WSGI_APPLICATION = 'alumniwebsite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

POSTGRES_DB = config('POSTGRES_DB', default=None)
if POSTGRES_DB:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': config('POSTGRES_DB'),
            'USER': config('POSTGRES_USER'),
            'PASSWORD': config('POSTGRES_PASSWORD'),
            'HOST': config('POSTGRES_HOST'),
            'PORT': config('POSTGRES_PORT'),
            'sslmode': config('DB_SSLMODE', default='prefer'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'authentication.User'

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Manila'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

USE_S3_MEDIA = config('USE_S3_MEDIA', default=False, cast=bool)

if USE_S3_MEDIA:
    # AWS credentials & bucket
    AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME', default=None)
    AWS_S3_CUSTOM_DOMAIN = config('AWS_S3_CUSTOM_DOMAIN', default=None)

    # Common S3 settings
    AWS_QUERYSTRING_AUTH = False      # no signed URLs
    AWS_DEFAULT_ACL = None            # avoids warnings
    AWS_S3_OBJECT_PARAMETERS = {      # cache headers
        'CacheControl': 'max-age=86400',
    }

    # Construct the URL base for media files
    if AWS_S3_CUSTOM_DOMAIN:
        S3_MEDIA_DOMAIN = AWS_S3_CUSTOM_DOMAIN
    else:
        region = f'.{AWS_S3_REGION_NAME}' if AWS_S3_REGION_NAME else ''
        S3_MEDIA_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3{region}.amazonaws.com'

    MEDIA_LOCATION = 'media'
    MEDIA_URL = f'https://{S3_MEDIA_DOMAIN}/{MEDIA_LOCATION}/'

    # Tell Django to use S3 for media uploads
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    # If you need separation of media subfolder, subclass or use STORAGES dict:
    # from storages.backends.s3boto3 import S3Boto3Storage
    # class MediaStorage(S3Boto3Storage):
    #     location = MEDIA_LOCATION
    # DEFAULT_FILE_STORAGE = 'your_project.settings.MediaStorage'
else:
    # Fallback: local media
    DOMAIN_URL = config('DOMAIN_URL')

    if DEBUG:
        MEDIA_URL = '/media/'
    else:
        MEDIA_URL = f"{DOMAIN_URL}/media/"
        
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Website Variables
SCHOOL_ABV = config('SCHOOL_ABV', default='ABC')



# REST FRAMEWORK
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'alumniwebsite.utils.authentication.CookieJWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM': 'jti',
}

SESSION_COOKIE_AGE = 3600
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True

PASSWORD_RESET_TIMEOUT = 3600


# Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')

CORS_ALLOW_ORIGINS = config('CORS_ALLOW_ORIGINS', cast=Csv())

CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', cast=Csv())

API_TOKEN_URL = config("API_TOKEN_URL")

CSP_INCLUDE_NONCE_IN = ['script-src', 'script-src-elem']

if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True

    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

    SESSION_COOKIE_SAMESITE = 'Strict'
    CSRF_COOKIE_SAMESITE = 'Strict'

    SESSION_COOKIE_NAME = '__Secure-sessionid'
    CSRF_COOKIE_NAME = '__Secure-csrftoken'
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    CSRF_COOKIE_PATH = '/'
    CSRF_COOKIE_DOMAIN = None


    CONTENT_SECURITY_POLICY = {
        "DIRECTIVES": {
            "default-src": ("'none'",),
            "script-src": (
                NONCE,
                "https://maps.googleapis.com",
                "https://www.google.com",
                "https://www.gstatic.com",
                "https://cdn.jsdelivr.net/npm/",
            ),
            "style-src": (
                "'self'",
                 NONCE,
                "https://cdn.jsdelivr.net/npm/",
                "https://fonts.googleapis.com",
                "https://maps.googleapis.com",
            ),
            "font-src": (
                "data:",
                "'self'",
                "https://fonts.gstatic.com",
            ),
            "img-src": ("'self'", "data:", "https://maps.gstatic.com", "https://maps.googleapis.com"),
            "connect-src": ("'self'", "https://maps.googleapis.com", "https://maps.gstatic.com"),
            "frame-src": (
                "https://www.google.com",
                "https://www.google.com/maps",
                "https://maps.google.com",
                "https://www.google.com/maps/embed",
            ),
            "object-src": ("'none'",),
            "base-uri": ("'self'",),
            "form-action": ("'self'",),
            "frame-ancestors": ("'none'",),
        },
    }

else:
    CSRF_COOKIE_SECURE = False
    SECURE_SSL_REDIRECT = False
    CORS_ALLOW_ALL_ORIGINS =True
    CSP_INCLUDE_NONCE_IN = ['script']

    CONTENT_SECURITY_POLICY_REPORT_ONLY = {
        "DIRECTIVES": {
            "default-src": ("'none'",),
            "script-src": (
                NONCE,
                "https://maps.googleapis.com",
                "https://www.google.com",
                "https://www.gstatic.com",
                "https://cdn.jsdelivr.net/npm/",
            ),
            "style-src": (
                "'self'",
                NONCE,
                "https://cdn.jsdelivr.net/npm/",
                "https://fonts.googleapis.com",
                "https://maps.googleapis.com",
            ),
            "font-src": ("'self'", "data:", "https://fonts.gstatic.com",),
            "img-src": ("'self'", "data:", "https://maps.gstatic.com", "https://maps.googleapis.com"),
            "connect-src": ("'self'", "https://maps.googleapis.com", "https://maps.gstatic.com"),
            "frame-src": (
                "https://www.google.com",
                "https://www.google.com/maps",
                "https://maps.google.com",
                "https://www.google.com/maps/embed",
            ),
            "object-src": ("'none'",),
            "base-uri": ("'self'",),
            "form-action": ("'self'",),
            "frame-ancestors": ("'none'",),
            "report-uri": ("/csp-report/",),
        }
    }


PERMISSIONS_POLICY = {
    "geolocation": ["self"],
    "microphone": [],
    "camera": [],
}

CSP_ENABLED = True


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'csp': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': 'csp.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['csp'],
            'level': 'WARNING',
            'propagate': True,
        },
    },
}

CSRF_FAILURE_VIEW = 'alumniwebsite.views.custom_csrf_failure_view'